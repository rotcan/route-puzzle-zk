
use groth16_solana::groth16::{Groth16Verifyingkey,Groth16Verifier};
use groth16_solana::errors::Groth16Error;
use anchor_lang::solana_program::program_error::ProgramError;
use anchor_lang::solana_program::entrypoint::ProgramResult;
use anchor_lang::{
    prelude::{Clock,SolanaSysvar},
    solana_program::clock::{self, UnixTimestamp},
};
#[cfg(not(target_arch = "bpf"))]
use std::time::{SystemTime, UNIX_EPOCH};
// use anchor_lang::{prelude::msg};

// use solana_program::alt_bn128::prelude;
use ark_bn254;
//use ark_serialize::{CanonicalDeserialize, CanonicalSerialize, Compress, Validate};
use ark_ff::bytes::FromBytes;
use ark_ff::bytes::ToBytes;

use std::ops::Neg;
type G1 = ark_ec::short_weierstrass_jacobian::GroupAffine<ark_bn254::g1::Parameters>;

pub const INIT_VERIFYING_KEY: Groth16Verifyingkey =  Groth16Verifyingkey {
	nr_pubinputs: 5,

	vk_alpha_g1: [
		44,177,179,37,60,233,222,112,118,154,139,146,137,112,25,218,214,36,108,14,63,161,109,201,254,18,233,142,127,84,149,150,
		36,149,239,85,176,23,39,51,219,73,102,57,57,226,115,195,151,237,89,201,48,246,85,83,201,88,141,140,79,230,146,213,
	],

	vk_beta_g2: [
		10,52,239,44,78,97,106,141,71,95,5,108,42,36,3,247,253,9,30,156,103,152,101,209,89,185,123,163,109,168,84,118,
		1,160,113,152,181,132,128,62,71,129,19,111,20,89,140,144,11,128,165,207,45,203,92,143,53,134,12,251,245,77,167,224,
		31,202,190,19,161,192,43,178,236,7,229,104,162,167,157,131,186,217,54,111,128,131,247,180,148,111,102,254,118,213,210,230,
		5,231,148,124,103,192,67,20,30,217,153,108,27,78,175,160,59,9,108,16,156,75,229,203,229,140,16,68,61,229,76,183,
	],

	vk_gamme_g2: [
		25,142,147,147,146,13,72,58,114,96,191,183,49,251,93,37,241,170,73,51,53,169,231,18,151,228,133,183,174,243,18,194,
		24,0,222,239,18,31,30,118,66,106,0,102,94,92,68,121,103,67,34,212,247,94,218,221,70,222,189,92,217,146,246,237,
		9,6,137,208,88,95,240,117,236,158,153,173,105,12,51,149,188,75,49,51,112,179,142,243,85,172,218,220,209,34,151,91,
		18,200,94,165,219,140,109,235,74,171,113,128,141,203,64,143,227,209,231,105,12,67,211,123,76,230,204,1,102,250,125,170,
	],

	vk_delta_g2: [
		21,195,5,225,133,149,250,86,192,189,158,240,243,63,180,222,237,247,252,7,96,188,171,139,169,74,28,155,118,117,171,103,
		23,161,146,178,135,74,193,164,159,59,60,53,130,219,23,103,207,223,114,198,65,171,238,120,14,228,244,12,60,232,5,6,
		22,25,73,26,178,72,157,232,237,186,172,80,188,3,243,245,38,131,181,148,103,137,114,255,70,36,140,236,58,196,122,32,
		42,142,23,149,113,13,44,232,51,33,186,180,168,88,132,226,104,28,238,77,221,132,184,180,90,91,63,23,176,103,7,151,
	],

	vk_ic: &[
		[
			11,81,33,115,97,138,154,206,160,33,70,57,74,66,143,16,189,142,33,0,149,111,197,182,203,216,36,76,208,3,12,166,
			47,185,51,30,137,23,66,35,107,8,189,103,26,23,22,228,15,225,95,96,27,46,60,83,109,228,223,41,182,39,160,61,
		],
		[
			41,0,78,96,248,1,245,87,195,70,251,177,171,62,145,51,190,177,33,78,157,118,229,173,39,228,191,184,44,43,215,107,
			22,17,231,73,101,172,199,13,197,104,181,50,121,230,56,115,187,138,97,52,87,169,252,90,249,178,155,109,89,108,25,222,
		],
		[
			12,109,155,255,107,201,228,190,6,49,19,156,230,48,150,48,30,170,106,9,11,225,60,26,144,57,243,71,171,0,249,80,
			24,208,63,192,44,11,102,190,41,234,49,61,117,179,227,206,191,223,154,248,209,191,242,223,237,108,245,251,129,37,210,165,
		],
		[
			31,165,102,206,83,149,161,207,186,13,234,235,230,104,186,54,97,31,217,214,162,17,89,121,22,251,28,142,169,27,32,67,
			26,74,57,225,3,184,64,116,187,234,133,207,17,32,72,52,245,184,5,136,180,138,249,85,180,107,79,52,58,246,246,227,
		],
		[
			24,179,105,23,168,250,214,217,198,77,248,202,213,144,228,118,148,146,78,85,27,159,210,115,38,204,199,180,244,117,148,171,
			8,187,109,68,117,40,230,116,212,26,46,232,72,196,77,67,156,34,118,1,13,79,141,102,182,199,59,46,77,121,120,132,
		],
	]
};



pub const ANALYZE_MOVE_VERIFYING_KEY: Groth16Verifyingkey =  Groth16Verifyingkey {
	nr_pubinputs: 10,

	vk_alpha_g1: [
		19,125,27,135,223,114,147,109,230,49,24,126,24,154,92,81,194,60,81,230,253,147,11,27,25,95,173,170,225,238,226,114,
		37,112,106,205,134,60,186,86,130,60,85,219,216,80,162,161,77,231,92,13,61,34,19,27,210,31,237,238,3,245,7,72,
	],

	vk_beta_g2: [
		34,55,189,205,124,26,103,248,92,149,150,107,19,173,141,137,51,25,124,111,179,7,175,35,150,201,131,105,27,130,79,120,
		43,50,56,159,243,166,118,222,28,183,98,19,139,185,16,60,213,12,205,166,170,152,251,11,239,98,97,197,170,172,154,155,
		25,98,132,245,65,57,196,192,115,199,154,148,108,154,169,24,221,37,42,125,39,244,232,67,102,218,41,142,40,139,72,196,
		20,6,93,238,105,166,145,206,115,104,213,49,94,212,182,36,85,159,41,33,98,79,233,212,59,6,245,160,36,147,168,133,
	],

	vk_gamme_g2: [
		25,142,147,147,146,13,72,58,114,96,191,183,49,251,93,37,241,170,73,51,53,169,231,18,151,228,133,183,174,243,18,194,
		24,0,222,239,18,31,30,118,66,106,0,102,94,92,68,121,103,67,34,212,247,94,218,221,70,222,189,92,217,146,246,237,
		9,6,137,208,88,95,240,117,236,158,153,173,105,12,51,149,188,75,49,51,112,179,142,243,85,172,218,220,209,34,151,91,
		18,200,94,165,219,140,109,235,74,171,113,128,141,203,64,143,227,209,231,105,12,67,211,123,76,230,204,1,102,250,125,170,
	],

	vk_delta_g2: [
		15,241,18,182,132,226,75,142,248,150,38,210,148,229,24,39,220,56,37,160,205,202,251,126,208,210,176,6,204,57,126,240,
		15,217,10,233,0,159,216,228,248,100,14,119,82,217,83,123,5,67,107,221,147,113,232,115,42,63,76,0,233,52,36,184,
		5,247,210,44,163,154,122,173,150,151,30,187,253,120,43,161,102,12,204,217,158,41,3,251,79,149,157,166,54,251,243,107,
		38,169,236,204,231,204,204,236,80,85,220,66,253,40,147,87,242,203,239,3,213,110,172,250,212,86,170,180,61,205,228,235,
	],

	vk_ic: &[
		[
			16,127,130,152,200,51,168,53,64,196,182,19,75,96,254,151,21,177,45,152,59,137,90,206,130,113,252,231,59,202,224,247,
			34,254,7,36,217,109,48,145,123,166,114,208,231,248,152,106,186,38,177,191,80,227,214,239,97,8,173,45,123,15,244,180,
		],
		[
			27,192,218,83,97,211,231,228,109,133,87,30,189,137,85,232,131,205,78,155,31,14,28,243,3,209,77,93,88,32,255,43,
			39,92,222,62,229,250,18,150,27,22,238,62,249,46,232,97,4,55,224,206,143,163,184,49,254,61,90,222,66,252,19,12,
		],
		[
			39,209,239,164,207,145,173,124,220,239,28,15,156,109,181,62,225,195,246,88,255,87,242,32,239,173,220,255,231,246,50,72,
			6,116,114,134,44,13,114,210,182,106,72,53,9,21,146,93,16,38,110,234,20,12,113,201,186,118,78,15,233,135,228,81,
		],
		[
			41,140,200,167,43,3,45,19,151,79,70,198,141,230,176,185,92,253,221,161,33,158,230,231,90,127,58,217,191,7,45,113,
			11,240,95,7,184,215,125,111,50,110,36,244,61,77,51,145,8,32,55,45,180,30,250,226,198,35,69,5,186,56,165,21,
		],
		[
			1,78,164,0,250,158,252,150,188,52,201,135,104,215,23,12,92,56,62,98,161,103,226,211,233,191,175,117,235,2,116,192,
			42,43,43,202,120,0,100,115,65,7,199,157,99,194,73,62,32,153,157,139,59,14,5,137,235,199,173,21,0,19,140,81,
		],
		[
			21,67,118,195,148,122,239,148,19,44,227,16,4,140,192,23,241,193,123,234,43,158,92,65,21,227,238,143,129,244,186,106,
			29,95,81,22,238,186,223,230,118,186,28,17,253,67,82,249,193,91,28,181,186,131,183,57,215,205,105,153,178,171,167,107,
		],
		[
			48,31,176,111,130,116,215,77,99,97,209,112,80,48,110,103,154,222,171,61,152,230,19,224,218,69,37,72,4,201,40,124,
			16,48,40,149,34,110,184,166,239,190,169,96,143,112,67,88,35,103,171,81,52,164,144,82,100,159,130,179,249,239,165,154,
		],
		[
			25,140,3,159,124,242,6,17,23,26,225,201,251,223,176,109,52,189,12,100,14,161,219,51,149,175,184,163,186,253,36,29,
			8,245,184,237,89,97,132,220,200,248,85,154,113,249,7,17,98,56,177,230,169,187,221,236,190,43,189,103,251,112,107,213,
		],
		[
			15,47,27,133,124,9,155,231,138,172,14,141,175,71,36,204,119,113,59,54,42,121,206,47,4,125,87,220,26,233,18,175,
			6,243,37,137,149,251,78,141,248,182,177,28,203,213,180,20,252,222,88,96,78,116,189,254,20,99,238,117,46,57,244,45,
		],
		[
			29,219,147,124,104,225,137,200,137,157,114,231,174,127,165,216,63,206,95,60,175,79,175,91,190,231,33,40,117,159,33,48,
			4,57,90,229,179,53,170,22,30,122,163,168,124,125,70,147,82,172,8,218,236,219,249,11,136,39,54,182,34,98,148,3,
		],
	]
};

pub fn verify_init_proof(proof: [u8;256],inputs: [[u8;32];4])-> Result<bool, Groth16Error> {
    // println!("PROOF={:?}",PROOF.len());
    
    // let proof_a: G1 = G1::deserialize_with_mode(
    //     &*[&change_endianness(&proof[0..64]), &[0u8][..]].concat(),
    //     Compress::No,
    //     Validate::Yes,
    // )
    // .unwrap();
    // let mut proof_a_neg = [0u8; 65];
    // proof_a
    //     .neg()
    //     .x
    //     .serialize_with_mode(&mut proof_a_neg[..32], Compress::No)
    //     .unwrap();
    // proof_a
    //     .neg()
    //     .y
    //     .serialize_with_mode(&mut proof_a_neg[32..], Compress::No)
    //     .unwrap();
    //  prelude::alt_bn128_multiplication(
    //     &[&INIT_VERIFYING_KEY.vk_ic[1][..], &inputs[0][..]].concat(),
    // ).unwrap();
    // {
    //     Ok(r)=>println!("mult r={:?}",r),
    //     Err(e)=>println!("mult error={:?}",e),
    // };
    let proof_a_neg = proof_a_fixer(proof[0..64].try_into().unwrap());

    // let proof_a = change_endianness(&proof_a_neg[..64]).try_into().unwrap();
    let proof_b = proof[64..192].try_into().unwrap();
    let proof_c = proof[192..256].try_into().unwrap();

    let mut verifier =
        Groth16Verifier::new(&proof_a_neg, &proof_b, &proof_c, &inputs, &INIT_VERIFYING_KEY)
            .unwrap();
    // println!("verifier={:?}",verifier);
    verifier.verify()
}


pub fn verify_player_move_proof(proof: [u8;256],inputs: [[u8;32];9])-> Result<bool, Groth16Error> {
    // println!("PROOF={:?}",PROOF.len());
    
    // let proof_a: G1 = G1::deserialize_with_mode(
    //     &*[&change_endianness(&proof[0..64]), &[0u8][..]].concat(),
    //     Compress::No,
    //     Validate::No,
    // )
    // .unwrap();
    // let mut proof_a_neg = [0u8; 65];
    // proof_a
    //     .neg()
    //     .x
    //     .serialize_with_mode(&mut proof_a_neg[..32], Compress::No)
    //     .unwrap();
    // proof_a
    //     .neg()
    //     .y
    //     .serialize_with_mode(&mut proof_a_neg[32..], Compress::No)
    //     .unwrap();
    //  prelude::alt_bn128_multiplication(
    //     &[&INIT_VERIFYING_KEY.vk_ic[1][..], &inputs[0][..]].concat(),
    // ).unwrap();
    // {
    //     Ok(r)=>println!("mult r={:?}",r),
    //     Err(e)=>println!("mult error={:?}",e),
    // };
    let proof_a_neg = proof_a_fixer(proof[0..64].try_into().unwrap());

    // let proof_a = change_endianness(&proof_a_neg[..64]).try_into().unwrap();
    let proof_b = proof[64..192].try_into().unwrap();
    let proof_c = proof[192..256].try_into().unwrap();

    let mut verifier =
        Groth16Verifier::new(&proof_a_neg, &proof_b, &proof_c, &inputs, &ANALYZE_MOVE_VERIFYING_KEY)
            .unwrap();
    // println!("verifier={:?}",verifier);
    verifier.verify()
}

pub fn assert_true(cond: bool, err: ProgramError, msg: &str) -> ProgramResult {
    if !cond {
        anchor_lang::prelude::msg!(msg);
        Err(err)
    } else {
        Ok(())
    }
}

pub fn get_last_element(arr: &[u8;32])->u8{
    arr[arr.len()-1]
}

pub fn proof_a_fixer(proof_a: [u8; 64]) -> [u8; 64] {
    let proof_a_neg_g1: G1 =
        <G1 as FromBytes>::read(&*[&change_endianness(&proof_a)[..], &[0u8][..]].concat()).unwrap();
    let mut proof_a_neg_buf = [0u8; 65];
    <G1 as ToBytes>::write(&proof_a_neg_g1.neg(), &mut proof_a_neg_buf[..]).unwrap();
    let mut proof_a_neg = [0u8; 64];
    proof_a_neg.copy_from_slice(&proof_a_neg_buf[..64]);

    let proof_a_neg = change_endianness(&proof_a_neg);
    proof_a_neg
}

const CHUNK_SIZE: usize = 32;
pub fn change_endianness<const SIZE: usize>(bytes: &[u8; SIZE]) -> [u8; SIZE] {
    let mut arr = [0u8; SIZE];
    for (i, b) in bytes.chunks(CHUNK_SIZE).enumerate() {
        for (j, byte) in b.iter().rev().enumerate() {
            arr[i * CHUNK_SIZE + j] = *byte;
        }
    }
    arr
}


pub fn get_unix_timestamp() -> i64 {
    #[cfg(target_arch = "bpf")]
    {
        let now_ts = Clock::get().expect("Time error").unix_timestamp;
        return now_ts;
    }

    #[cfg(not(target_arch = "bpf"))]
    {
        let start = SystemTime::now();
        let since_the_epoch = start.duration_since(UNIX_EPOCH).expect("Time error");
        return since_the_epoch.as_secs() as i64;
    }
}


pub const VERIFYING_KEY: Groth16Verifyingkey = Groth16Verifyingkey {
    nr_pubinputs: 10,

    vk_alpha_g1: [
        45, 77, 154, 167, 227, 2, 217, 223, 65, 116, 157, 85, 7, 148, 157, 5, 219, 234, 51,
        251, 177, 108, 100, 59, 34, 245, 153, 162, 190, 109, 242, 226, 20, 190, 221, 80, 60,
        55, 206, 176, 97, 216, 236, 96, 32, 159, 227, 69, 206, 137, 131, 10, 25, 35, 3, 1, 240,
        118, 202, 255, 0, 77, 25, 38,
    ],

    vk_beta_g2: [
        9, 103, 3, 47, 203, 247, 118, 209, 175, 201, 133, 248, 136, 119, 241, 130, 211, 132,
        128, 166, 83, 242, 222, 202, 169, 121, 76, 188, 59, 243, 6, 12, 14, 24, 120, 71, 173,
        76, 121, 131, 116, 208, 214, 115, 43, 245, 1, 132, 125, 214, 139, 192, 224, 113, 36,
        30, 2, 19, 188, 127, 193, 61, 183, 171, 48, 76, 251, 209, 224, 138, 112, 74, 153, 245,
        232, 71, 217, 63, 140, 60, 170, 253, 222, 196, 107, 122, 13, 55, 157, 166, 154, 77, 17,
        35, 70, 167, 23, 57, 193, 177, 164, 87, 168, 199, 49, 49, 35, 210, 77, 47, 145, 146,
        248, 150, 183, 198, 62, 234, 5, 169, 213, 127, 6, 84, 122, 208, 206, 200,
    ],

    vk_gamme_g2: [
        25, 142, 147, 147, 146, 13, 72, 58, 114, 96, 191, 183, 49, 251, 93, 37, 241, 170, 73,
        51, 53, 169, 231, 18, 151, 228, 133, 183, 174, 243, 18, 194, 24, 0, 222, 239, 18, 31,
        30, 118, 66, 106, 0, 102, 94, 92, 68, 121, 103, 67, 34, 212, 247, 94, 218, 221, 70,
        222, 189, 92, 217, 146, 246, 237, 9, 6, 137, 208, 88, 95, 240, 117, 236, 158, 153, 173,
        105, 12, 51, 149, 188, 75, 49, 51, 112, 179, 142, 243, 85, 172, 218, 220, 209, 34, 151,
        91, 18, 200, 94, 165, 219, 140, 109, 235, 74, 171, 113, 128, 141, 203, 64, 143, 227,
        209, 231, 105, 12, 67, 211, 123, 76, 230, 204, 1, 102, 250, 125, 170,
    ],

    vk_delta_g2: [
        25, 142, 147, 147, 146, 13, 72, 58, 114, 96, 191, 183, 49, 251, 93, 37, 241, 170, 73,
        51, 53, 169, 231, 18, 151, 228, 133, 183, 174, 243, 18, 194, 24, 0, 222, 239, 18, 31,
        30, 118, 66, 106, 0, 102, 94, 92, 68, 121, 103, 67, 34, 212, 247, 94, 218, 221, 70,
        222, 189, 92, 217, 146, 246, 237, 9, 6, 137, 208, 88, 95, 240, 117, 236, 158, 153, 173,
        105, 12, 51, 149, 188, 75, 49, 51, 112, 179, 142, 243, 85, 172, 218, 220, 209, 34, 151,
        91, 18, 200, 94, 165, 219, 140, 109, 235, 74, 171, 113, 128, 141, 203, 64, 143, 227,
        209, 231, 105, 12, 67, 211, 123, 76, 230, 204, 1, 102, 250, 125, 170,
    ],

    vk_ic: &[
        [
            3, 183, 175, 189, 219, 73, 183, 28, 132, 200, 83, 8, 65, 22, 184, 81, 82, 36, 181,
            186, 25, 216, 234, 25, 151, 2, 235, 194, 13, 223, 32, 145, 15, 37, 113, 122, 93,
            59, 91, 25, 236, 104, 227, 238, 58, 154, 67, 250, 186, 91, 93, 141, 18, 241, 150,
            59, 202, 48, 179, 1, 53, 207, 155, 199,
        ],
        [
            46, 253, 85, 84, 166, 240, 71, 175, 111, 174, 244, 62, 87, 96, 235, 196, 208, 85,
            186, 47, 163, 237, 53, 204, 176, 190, 62, 201, 189, 216, 132, 71, 6, 91, 228, 97,
            74, 5, 0, 255, 147, 113, 161, 152, 238, 177, 78, 81, 111, 13, 142, 220, 24, 133,
            27, 149, 66, 115, 34, 87, 224, 237, 44, 162,
        ],
        [
            29, 157, 232, 254, 238, 178, 82, 15, 152, 205, 175, 129, 90, 108, 114, 60, 82, 162,
            37, 234, 115, 69, 191, 125, 212, 85, 176, 176, 113, 41, 23, 84, 8, 229, 196, 41,
            191, 243, 112, 105, 166, 75, 113, 160, 140, 34, 139, 179, 53, 180, 245, 195, 5, 24,
            42, 18, 82, 60, 173, 192, 67, 149, 211, 250,
        ],
        [
            18, 4, 92, 105, 55, 33, 222, 133, 144, 185, 99, 131, 167, 143, 52, 120, 44, 79,
            164, 63, 119, 223, 199, 154, 26, 86, 22, 208, 50, 53, 159, 65, 14, 171, 53, 159,
            255, 133, 91, 30, 162, 209, 152, 18, 251, 112, 105, 90, 65, 234, 44, 4, 42, 173,
            31, 230, 229, 137, 177, 112, 241, 142, 62, 176,
        ],
        [
            13, 117, 56, 250, 131, 38, 119, 205, 221, 228, 32, 185, 236, 82, 102, 29, 198, 53,
            117, 151, 19, 10, 255, 211, 41, 210, 72, 221, 79, 107, 251, 150, 35, 187, 30, 32,
            198, 17, 220, 4, 68, 10, 71, 51, 31, 169, 4, 174, 10, 38, 227, 229, 193, 129, 150,
            76, 94, 224, 182, 13, 166, 65, 175, 89,
        ],
        [
            21, 167, 160, 214, 213, 132, 208, 197, 115, 195, 129, 111, 129, 38, 56, 52, 41, 57,
            72, 249, 50, 187, 184, 49, 240, 228, 142, 147, 187, 96, 96, 102, 34, 163, 43, 218,
            199, 187, 250, 245, 119, 151, 237, 67, 231, 70, 236, 67, 157, 181, 216, 174, 25,
            82, 120, 255, 191, 89, 230, 165, 179, 241, 188, 218,
        ],
        [
            4, 136, 219, 130, 55, 89, 21, 224, 41, 30, 53, 234, 66, 160, 129, 174, 154, 139,
            151, 33, 163, 221, 150, 192, 171, 102, 241, 161, 48, 130, 31, 175, 6, 47, 176, 127,
            13, 8, 36, 228, 239, 219, 6, 158, 22, 31, 22, 162, 91, 196, 132, 188, 156, 228, 30,
            1, 178, 246, 197, 186, 236, 249, 236, 147,
        ],
        [
            9, 41, 120, 80, 67, 24, 240, 221, 136, 156, 137, 182, 168, 17, 176, 118, 119, 72,
            170, 188, 227, 31, 15, 22, 252, 37, 198, 154, 195, 163, 64, 125, 37, 211, 235, 67,
            249, 133, 45, 90, 162, 9, 173, 19, 80, 154, 208, 173, 221, 203, 206, 254, 81, 197,
            104, 26, 177, 78, 86, 210, 51, 116, 60, 87,
        ],
        [
            3, 41, 86, 208, 125, 147, 53, 187, 213, 220, 195, 141, 216, 40, 92, 137, 70, 210,
            168, 103, 105, 236, 85, 37, 165, 209, 246, 75, 122, 251, 75, 93, 28, 108, 154, 181,
            15, 16, 35, 88, 65, 211, 8, 11, 123, 84, 185, 187, 184, 1, 83, 141, 67, 46, 241,
            222, 232, 135, 59, 44, 152, 217, 237, 106,
        ],
        [
            34, 98, 189, 118, 119, 197, 102, 193, 36, 150, 200, 143, 226, 60, 0, 239, 21, 40,
            5, 156, 73, 7, 247, 14, 249, 157, 2, 241, 181, 208, 144, 0, 34, 45, 86, 133, 116,
            53, 235, 160, 107, 36, 195, 125, 122, 10, 206, 88, 85, 166, 62, 150, 65, 159, 130,
            7, 255, 224, 227, 229, 206, 138, 68, 71,
        ],
    ],
};


pub const PUBLIC_INPUTS: [[u8; 32]; 9] = [
    [
        34, 238, 251, 182, 234, 248, 214, 189, 46, 67, 42, 25, 71, 58, 145, 58, 61, 28, 116,
        110, 60, 17, 82, 149, 178, 187, 160, 211, 37, 226, 174, 231,
    ],
    [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
        152, 17, 147,
    ],
    [
        4, 247, 199, 87, 230, 85, 103, 90, 28, 183, 95, 100, 200, 46, 3, 158, 247, 196, 173,
        146, 207, 167, 108, 33, 199, 18, 13, 204, 198, 101, 223, 186,
    ],
    [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7,
        49, 65, 41,
    ],
    [
        7, 130, 55, 65, 197, 232, 175, 217, 44, 151, 149, 225, 75, 86, 158, 105, 43, 229, 65,
        87, 51, 150, 168, 243, 176, 175, 11, 203, 180, 149, 72, 103,
    ],
    [
        46, 93, 177, 62, 42, 66, 223, 153, 51, 193, 146, 49, 154, 41, 69, 198, 224, 13, 87, 80,
        222, 171, 37, 141, 0, 1, 50, 172, 18, 28, 213, 213,
    ],
    [
        40, 141, 45, 3, 180, 200, 250, 112, 108, 94, 35, 143, 82, 63, 125, 9, 147, 37, 191, 75,
        62, 221, 138, 20, 166, 151, 219, 237, 254, 58, 230, 189,
    ],
    [
        33, 100, 143, 241, 11, 251, 73, 141, 229, 57, 129, 168, 83, 23, 235, 147, 138, 225,
        177, 250, 13, 97, 226, 162, 6, 232, 52, 95, 128, 84, 90, 202,
    ],
    [
        25, 178, 1, 208, 219, 169, 222, 123, 113, 202, 165, 77, 183, 98, 103, 237, 187, 93,
        178, 95, 169, 156, 38, 100, 125, 218, 104, 94, 104, 119, 13, 21,
    ],
];

pub const PROOF: [u8; 256] = [
    45, 206, 255, 166, 152, 55, 128, 138, 79, 217, 145, 164, 25, 74, 120, 234, 234, 217, 68,
    149, 162, 44, 133, 120, 184, 205, 12, 44, 175, 98, 168, 172, 20, 24, 216, 15, 209, 175,
    106, 75, 147, 236, 90, 101, 123, 219, 245, 151, 209, 202, 218, 104, 148, 8, 32, 254, 243,
    191, 218, 122, 42, 81, 193, 84, 40, 57, 233, 205, 180, 46, 35, 111, 215, 5, 23, 93, 12, 71,
    118, 225, 7, 46, 247, 147, 47, 130, 106, 189, 184, 80, 146, 103, 141, 52, 242, 25, 0, 203,
    124, 176, 110, 34, 151, 212, 66, 180, 238, 151, 236, 189, 133, 209, 17, 137, 205, 183, 168,
    196, 92, 159, 75, 174, 81, 168, 18, 86, 176, 56, 16, 26, 210, 20, 18, 81, 122, 142, 104,
    62, 251, 169, 98, 141, 21, 253, 50, 130, 182, 15, 33, 109, 228, 31, 79, 183, 88, 147, 174,
    108, 4, 22, 14, 129, 168, 6, 80, 246, 254, 100, 218, 131, 94, 49, 247, 211, 3, 245, 22,
    200, 177, 91, 60, 144, 147, 174, 90, 17, 19, 189, 62, 147, 152, 18, 41, 139, 183, 208, 246,
    198, 118, 127, 89, 160, 9, 27, 61, 26, 123, 180, 221, 108, 17, 166, 47, 115, 82, 48, 132,
    139, 253, 65, 152, 92, 209, 53, 37, 25, 83, 61, 252, 42, 181, 243, 16, 21, 2, 199, 123, 96,
    218, 151, 253, 86, 69, 181, 202, 109, 64, 129, 124, 254, 192, 25, 177, 199, 26, 50,
];


// pub fn verify_test()-> Result<bool, Groth16Error> {
//     // println!("PROOF={:?}",PROOF.len());
//     //msg!("399");
    
//     let proof_a: G1 = G1::deserialize_with_mode(
//         &*[&change_endianness(&PROOF[0..64]), &[0u8][..]].concat(),
//         Compress::No,
//         Validate::No,
//     )
//     .unwrap();
//     //msg!("406");
    
//     let mut proof_a_neg = [0u8; 65];
//     proof_a
//         .neg()
//         .x
//         .serialize_with_mode(&mut proof_a_neg[..32], Compress::No)
//         .unwrap();
//     proof_a
//         .neg()
//         .y
//         .serialize_with_mode(&mut proof_a_neg[32..], Compress::No)
//         .unwrap();
  
//     //msg!("420");
//     let proof_a = change_endianness(&proof_a_neg[..64]).try_into().unwrap();
//     let proof_b  = PROOF[64..192].try_into().unwrap();
//     let proof_c   = PROOF[192..256].try_into().unwrap();
//     //msg!("proof a = {:?}",proof_a);
//     let mut verifier =
//         Groth16Verifier::new(&proof_a, &proof_b, &proof_c, &PUBLIC_INPUTS, &VERIFYING_KEY)
//             .unwrap();
//     // println!("verifier={:?}",verifier);
//     verifier.verify()
//     // return Ok(false);
// }
